buildscript {
    repositories {
        jcenter()
        maven { url = 'http://maven.modmuss50.me' }
    }
    dependencies {
        classpath 'net.fabricmc:fabric-loom:0.2.1-SNAPSHOT'
    }
}

apply plugin: 'fabric-loom'
apply plugin: 'maven'
apply plugin: 'maven-publish'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}"
    modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

    // Required Mods
    modCompile "net.fabricmc:fabric:${project.fabric_version}"

    // Required Libraries
    compile 'org.jetbrains:annotations:13.0'

    // Optional Mods
    modCompile "io.github.prospector.modmenu:ModMenu:${project.modmenu_version}"
}

if(!hasProperty('mod_version')) {
    mod_version = 'UNKNOWN'
}

def getGitCommitHash = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch(ignored) {
        return null;
    }
}

def getGitDirtyIndex = { ->
    try {
        return exec {
            commandLine 'git', 'diff-index', '--quiet', '--cached', 'HEAD'
            ignoreExitValue = true
        }.exitValue == 1
    } catch(ignored) {
        return false;
    }
}

def getGitDirtyFiles = { ->
    try {
        return exec {
            commandLine 'git', 'diff-files', '--quiet'
            ignoreExitValue = true
        }.exitValue == 1
    } catch(ignored) {
        return false;
    }
}

def getGitChangelog = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        def gitHash = System.getenv("GIT_COMMIT")
        def gitPrevHash = System.getenv("GIT_PREVIOUS_COMMIT")
        def travisRange = System.getenv("TRAVIS_COMMIT_RANGE")
        if(gitHash && gitPrevHash) {
            exec {
                commandLine 'git', 'log', '--pretty=tformat:%s - %aN', '' + gitPrevHash + '...' + gitHash
                standardOutput = stdout
            }
            return stdout.toString().trim()
        } else if(travisRange) {
            exec {
                commandLine 'git', 'log', '--pretty=tformat:%s - %aN', '' + travisRange
                standardOutput = stdout
            }
            return stdout.toString().trim()
        } else {
            return "";
        }
    } catch(ignored) {
        return "";
    }
}

ext.git_version = getGitCommitHash()
ext.git_dirty = getGitDirtyIndex() || getGitDirtyFiles()

ext.build_number = System.getenv('BUILD_NUMBER')
if(!build_number) {
    ext.build_number = System.getenv('TRAVIS_BUILD_NUMBER')
}

ext.git_separator = '.'
if(mod_version.contains('+')) {
    if(build_number) {
        version = mod_version + '.' + build_number
    } else {
        version = mod_version
    }

    ext.internal_version = version
} else {
    version = mod_version

    ext.internal_version = version
    if(build_number) {
        ext.internal_version += "+release." + build_number
    } else {
        ext.git_separator = '+'
    }
}

if(git_version) {
    ext.internal_version += git_separator + git_version
    if(git_dirty) {
        ext.internal_version += '.dirty'
    }
} else {
    ext.internal_version = version
}

minecraft {
}



processResources {
    // this will ensure that this task is re-run when there's a change
    inputs.property "version", project.version

    // replace stuff in fabric.mod.json, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"

        // add mod metadata
        expand "version": project.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.png'
        exclude '**/*_at.cfg'
    }
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.png'
        include '**/*_at.cfg'
    }
}

compileJava {
    options.debug = true
    options.debugOptions.debugLevel = 'source,lines,vars'
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

task apiJar(type: Jar) {
    onlyIf { project.hasProperty('api_filter') }
    dependsOn classes

    from sourceSets.main.allJava
    from sourceSets.main.output
    include api_filter

    classifier 'api'
}

artifacts {
    archives apiJar
}

idea {
    module {
        inheritOutputDirs = true
    }

    project {
        vcs = 'Git'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(jar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }
}
